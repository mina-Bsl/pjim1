* Algorithm
** Code organisation
   The algorithm follows roughly those steps:
   1. The germlines are read. germlines are in the fasta format and are read
      by the Fasta class (=core/fasta.h=). Germlines are built using the
      Germline (or MultiGermline) class (=core/germline.h=)
   2. The input sequence file (.fasta, .fastq, .gz) is read by an OnlineFasta
      (=core/fasta.h=). The difference with the Fasta class being that all the
      data is not stored in memory but the file is read online, storing only
      the current entry.
   3. Windows must be extracted from the read, which is done by the
      WindowExtractor class (=core/windowExtractor.h=). This class has an
      =extract= method which returns a WindowsStorage object
      (=core/windows.h=) in which windows are stored.
   4. To save space consumption, all the reads linked to a given window are
      not stored. Only the longer ones are kept. The BinReadStorage class is
      used for that purpose (=core/read_storage.h=).
   5. In the WindowStorage, we now have the information on the clusters and on
      the abundance of each cluster. However we lack a sequence representative
      of the cluster. For that purpose the class provides a
      =getRepresentativeComputer= method that provides a
      KmerRepresentativeComputer (=core/representative.h=). This class can
      compute a representative sequence using the (long) reads that were
      stored for a given window.
   6. The representative can then be segmented to determine what V, D and J
      genes are at play. This is done by the FineSegmenter (=core/segment.h=).

* Browser

** Installation

Opening the =browser/index.html= file is enough to get a functionning browser,
able to open =.vidjil= files with the =import/export= menu.

(XXX TODO: explain germlines XXX)

To work with actual data, the easiest way is to copy =js/conf.js.sample= to =js/conf.js=.
This will unlock the =patients= menu and allow your local browser
to access the public server at http://rbx.vidjil.org/.
** Notifications
*** Priority
#<<browser:priority>>
    The priority determines how the notification are shown and what action the
    used should do. The priorities can be between 0 and 3.
    - 0 :: The notification is not shown
    - 1 :: The notification is shown (usually on green background) and
         automatically disappears
    - 2 :: The notification is shown (usually on yellow background) and
         automatically disappears
    - 3 :: The notification is shown (usually on red background) and doesn't
         disappear until the user clicks on it.

    In the =console.log=, the field =priority= takes one of those priorities.
** Plots
*** How to add something to be plotted
    You want to add a dimension in the scatterplot or as a color? Read the
    following.
**** Scatterplot
     In [[file:../browser/js/scatterPlot.js][scatterPlot.js]], the =available_axis= object defines the dimensions that
     can be displayed. It suffices to add an entry so that it will be proposed
     in the X and Y axis. This kind of way of doing should be generalized to
     the other components.

     The presets are defined in the =preset= object.
**** Color
     Adding a color needs slightly more work than adding a dimension in the
     scatterplot.

     The function =updateColor= in file [[file:../browser/js/clone.js][clone.js]] must be modified to add our color method.
     The variable =this.color= must contain a color (either in HTML or RGB, or…).

     Then a legend must be displayed to understand what the color represents.
     For this sake, modify the =build_info_color= method in [[file:../browser/js/builder.js][builder.js]] file. By
     default four spans are defined (that can be used) to display the legend:
     =span0=, ..., =span3=.

     Finally modify the [[file:../browser/index.html][index.html]] file to add the new color method in the
     select box (which is under the =color_menu= ID).
** Classes
*** Clone
**** Info box
     In the info box all the fields starting with a _ are put. Also all the
     fields under the =seg= field are displayed as soon as they have a =start= and
     =stop=. Some of them can be explicitly not displayed by filling the
     =exclude_seg_info= array in =getHtmlInfo=.
* Server
** Notifications
*** Priority
    The priority determines how the notification is shown (see [[browser:priority][here for more
    details]]). From the server we have two ways of modifiying the priority.
    Either by defining the =success= field to ='true'= or to ='false'=, either
    by explicitly specifying the priority in the field =priority=.

    For more details see 35054e4
** Getting data and analysis
   How the data files (.vidjil) and analysis files are retrieved from the server?
*** Retrieving the data file
    This is done in the =default.py= controller under the =get_data= function.
    However the .vidjil file is not provided as its exact copy on the
    server. Several informations coming from the DB are fed to the file
    (original filename, time stamps, information on each point, …)
*** Retrieving the analysis file
    This is done in the =default.py= controller under the =get_analysis= function.
    Actually the real work is done in the =analysis_file.py= model, in the
    =get_analysis_data= function.
* Tests
** Algorithm
*** Unit
    Unit tests are managed using an internal lightweight poorly-designed
    library that outputs a TAP file. They are organised in the directory
    [[../algo/tests][algo/tests]].

    All the tests are defined in the [[../algo/tests/tests.cpp][tests.cpp]] file. But, for the sake of
    clarity, this file includes other =cpp= files that incorporates all the
    tests. A call to =make= compiles and launched the =tests.cpp= file, which
    outputs a TAP file (in case of total success) and creates a =tests.cpp.tap=
    file (in every case).
**** Tap test library
     The library is defined in the [[../algo/tests/testing.h][testing.h]] file.

     Tests must be declared in the [[../algo/tests/tests.h][tests.h]] file:
     1. Define a new macro (in the enum) corresponding to the test name
     2. In =declare_tests()= use =RECORD_TAP_TEST= to associate the macro with a
        description (that will be displayed in the TAP output file).

     Then testing can be done using the =TAP_TEST= macro. The macro takes three
     arguments. The first one is a boolean that is supposed to be true, the
     second is the test name (using the macro defined in =tests.h=) and the
     third one (which can be an empty string) is something which is displayed
     when the test fails.


** Browser
*** Unit
    The unit tests in the browser are managed by QUnit and launched using
    [[http://phantomjs.org/][phantomjs]], by launching =make unit= from the =browser/test= directory.
    The tests are organised in the directory
    [[../browser/test/QUnit/testFiles][browser/test/QUnit/testFiles]]. The file [[../browser/test/QUnit/testFiles/data_test.js][data_test.js]] contains a toy
    dataset that is used in the tests.

    Unit tests can be launched using a real browser (instead of phantomjs). It
    suffices to open the file [[../browser/test/QUnit/test_Qunit.html][test_Qunit.html]]. In this HTML webpage it is
    possible to see the coverage. It is important that all possible functions
    are covered by unit tests. Having the coverage displayed under Firefox
    needs to display the webpage using a web server for security
    reasons. Under Chromium/Chrome this should work fine by just opening the
    webpage.
*** Functional
    All the browser functional testing is done in the directory
    =browser/tests=.
    
    Several stuff must be installed to launch the functional browser
    tests. Please see the doc in browser-tests.org.

    The functional tests are built using two base files:
    - vidjil_browser.rb :: abstracts the vidjil browser (avoid using IDs or
         class names that could change in the test). The tests must rely as
         much as possible on vidjil_browser. If access to some
         data/input/menus are missing they must be addded there.
    - browser_test.rb :: prepares the environment for the tests. Each test
         file will extend this class (as can be seen in test_multilocus.rb)

    The tests are in the files whose name matches the pattern =test*.rb=. The
    tests are launched by the script in =launch_functional_tests= which launch
    all the files matching the previous pattern. It also backs up the test
    reports as =ci_reporter= removes them before each file is run.
